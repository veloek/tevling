@page "/Statistics"

<PageTitle>Tevling - @Loc["Statistics"]</PageTitle>

<h1 class="title mb-5">@Loc["Statistics"]</h1>

@switch (TimePeriod)
{
    case TimePeriod.Months:
        <label>@Loc["Months"]:</label>
        break;
    case TimePeriod.Weeks:
        <label>@Loc["Weeks"]:</label>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}

<InputSelect @bind-Value="@NumberOfPeriodsToReview" @oninput="DrawChart" class="mb-2">
    @for (int i = 3; i <= 36; i += 3)
    {
        <option value="@i">@i</option>
    }
</InputSelect>
<ButtonGroup
    Items="Enum.GetValues<ChallengeMeasurement>()"
    DisplayFunc="measurement => Loc[measurement.ToString()]"
    T="ChallengeMeasurement"
    @bind-SelectedItem="Measurement"
    OnButtonSelected="@DrawChart">
</ButtonGroup>
<ButtonGroup
    Items="Enum.GetValues<TimePeriod>()"
    DisplayFunc="timePeriod => Loc[timePeriod.ToString()]"
    T="TimePeriod"
    @bind-SelectedItem="TimePeriod"
    OnButtonSelected="@DrawChart">
</ButtonGroup>
<div class="d-flex flex-wrap p-2 mb-5">
    <canvas id="TheChart"></canvas>
</div>
@switch (TimePeriod)
{
    case TimePeriod.Months:
        <h2>@(new MarkupString(string.Format(Loc["TheLastMonths"], NumberOfPeriodsToReview))):</h2>
        break;
    case TimePeriod.Weeks:
        <h2>@(new MarkupString(string.Format(Loc["TheLastWeeks"], NumberOfPeriodsToReview))):</h2>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}
<div>
    <table style="width: 100%">
        <thead>
        <tr>
            <th scope="col">@Loc["Activity"]</th>
            <th scope="col">
                @switch (Measurement)
                {
                    case ChallengeMeasurement.Distance:
                        <span>@Loc["Traversed"]</span>
                        break;
                    case ChallengeMeasurement.Elevation:
                        <span>@Loc["Climbed"]</span>
                        break;
                    case ChallengeMeasurement.Time:
                        <span>@Loc["Spent"]</span>
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </th>
            <th scope="col">@Loc["Averaging"]</th>
            @switch (TimePeriod)
            {
                case TimePeriod.Months:
                    <th scope="col">@Loc["CurrentMonth"]</th>
                    break;
                case TimePeriod.Weeks:
                    <th scope="col">@Loc["CurrentWeek"]</th>
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        </tr>
        </thead>
        <tbody>
        @switch (Measurement)
        {
            case ChallengeMeasurement.Distance:
                @foreach (Stats stats in Distances)
                {
                    <tr>
                        <td data-label="@Loc["Activity"]">
                            @stats.Type
                        </td>
                        <td data-label="@Loc["Traversed"]">
                            @stats.LastTimePeriodTotal km
                        </td>
                        <td data-label="@Loc["Averaging"]">
                            @stats.LastTimePeriodAverage km
                        </td>
                        <td data-label="@Loc["CurrentMonth"]">
                            @Math.Round(stats.ThisTimePeriod, 1) km
                            <b>(@Math.Round(stats.CurrentMonthComparedToAverage(), 1)%</b> @((MarkupString)stats.IncreaseVsDecrease(@Loc["Increase"], @Loc["Decrease"])))
                        </td>
                    </tr>
                }

                break;
            case ChallengeMeasurement.Elevation:
                @foreach (Stats stats in Elevations)
                {
                    <tr>
                        <td data-label="@Loc["Activity"]">
                            @stats.Type
                        </td>
                        <td data-label="@Loc["Climbed"]">
                            @stats.LastTimePeriodTotal m
                        </td>
                        <td data-label="@Loc["Averaging"]">
                            @stats.LastTimePeriodAverage m
                        </td>
                        <td data-label="@Loc["CurrentMonth"]">
                            @Math.Round(stats.ThisTimePeriod, 1) m
                            <b>(@Math.Round(stats.CurrentMonthComparedToAverage(), 1)%</b> @((MarkupString)stats.IncreaseVsDecrease(@Loc["Increase"], @Loc["Decrease"])))
                        </td>
                    </tr>
                }

                break;
            case ChallengeMeasurement.Time:
                @foreach (Stats stats in Durations)
                {
                    <tr>
                        <td data-label="@Loc["Activity"]">
                            @stats.Type
                        </td>
                        <td data-label="@Loc["Spent"]">
                            @stats.LastTimePeriodTotal @Loc["h"]
                        </td>
                        <td data-label="@Loc["Averaging"]">
                            @stats.LastTimePeriodAverage @Loc["h"]
                        </td>
                        <td data-label="@Loc["CurrentMonth"]">
                            @Math.Round(stats.ThisTimePeriod, 1) @Loc["h"]
                            <b>(@Math.Round(stats.CurrentMonthComparedToAverage(), 1)%</b> @((MarkupString)stats.IncreaseVsDecrease(@Loc["Increase"], @Loc["Decrease"])))
                        </td>
                    </tr>
                }

                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        </tbody>
    </table>
    <div class="mt-2">
        <h4><u>@Loc["Total"] <b>
            @switch (Measurement)
            {
                case ChallengeMeasurement.Distance:
                    <span>@Math.Round(Distances.Sum(stats => stats.LastTimePeriodTotal), 1) km</span>
                    break;
                case ChallengeMeasurement.Elevation:
                    <span>@Math.Round(Elevations.Sum(stats => stats.LastTimePeriodTotal), 1) m</span>
                    break;
                case ChallengeMeasurement.Time:
                    <span>@Math.Round(Durations.Sum(stats => stats.LastTimePeriodTotal), 1) @Loc["h"]</span>
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        </b></u></h4>
    </div>
</div>

@if(IsGarminDeviceSourcedData())
{
    <p class="mt-5">@Loc["Attribution"]</p>
}
