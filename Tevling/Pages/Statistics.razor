@page "/Statistics"
<PageTitle>Tevling - Statistics</PageTitle>

<h1 class="title mb-5">Statistics</h1>

<label>Months:</label>
<InputSelect @bind-Value="@NumberOfMonthsToReview" @oninput="DrawChart" class="mb-2">
    @for (int i = 3; i <= 36; i += 3)
    {
        <option value="@i">@i</option>
    }
</InputSelect>
<ButtonGroup
    Items="Enum.GetValues<ChallengeMeasurement>()"
    T="ChallengeMeasurement"
    @bind-SelectedItem="Measurement"
    OnButtonSelected="@DrawChart">
</ButtonGroup>

<div class="d-flex flex-wrap p-2 mb-5">
    <canvas id="TheChart"></canvas>
</div>

<h2>The last <b>@NumberOfMonthsToReview</b> month(s) you've:</h2>
<div>
    <table style="width: 100%">
        <thead>
        <tr>
            <th scope="col">Activity</th>
            <th scope="col">
                @switch (Measurement)
                {
                    case ChallengeMeasurement.Distance:
                        <span>Traversed</span>
                        break;
                    case ChallengeMeasurement.Elevation:
                        <span>Climbed</span>
                        break;
                    case ChallengeMeasurement.Time:
                        <span>Spent</span>
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </th>
            <th scope="col">Averaging</th>
            <th scope="col">Current Month</th>
        </tr>
        </thead>
        <tbody>
        @switch (Measurement)
        {
            case ChallengeMeasurement.Distance:
                @foreach (Stats stats in Distances)
                {
                    <tr>
                        <td data-label="Activity">
                            @stats.Type
                        </td>
                        <td data-label="Traversed">
                            @stats.LastMonthsTotal km
                        </td>
                        <td data-label="Averaging">
                            @stats.LastMonthsAverage km
                        </td>
                        <td data-label="Current Month">
                            @Math.Round(stats.ThisMonth, 1) km
                            <b>(@Math.Round(stats.CurrentMonthComparedToAverage(), 1)%</b> @((MarkupString)stats.IncreaseVsDecrease()))
                        </td>
                    </tr>
                }
                break;
            case ChallengeMeasurement.Elevation:
                @foreach (Stats stats in Elevations)
                {
                    <tr>
                        <td data-label="Activity">
                            @stats.Type
                        </td>
                        <td data-label="Climbed">
                            @stats.LastMonthsTotal m
                        </td>
                        <td data-label="Averaging">
                            @stats.LastMonthsAverage m
                        </td>
                        <td data-label="Current Month">
                            @Math.Round(stats.ThisMonth, 1) m
                            <b>(@Math.Round(stats.CurrentMonthComparedToAverage(), 1)%</b> @((MarkupString)stats.IncreaseVsDecrease()))
                        </td>
                    </tr>
                }
                break;
            case ChallengeMeasurement.Time:
                @foreach (Stats stats in Durations)
                {
                    <tr>
                        <td data-label="Activity">
                            @stats.Type
                        </td>
                        <td data-label="Spent">
                            @stats.LastMonthsTotal h
                        </td>
                        <td data-label="Averaging">
                            @stats.LastMonthsAverage h
                        </td>
                        <td data-label="Current Month">
                            @Math.Round(stats.ThisMonth, 1) h
                            <b>(@Math.Round(stats.CurrentMonthComparedToAverage(), 1)%</b> @((MarkupString)stats.IncreaseVsDecrease()))
                        </td>
                    </tr>
                }
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        </tbody>
    </table>
    <div class="mt-2">
        <h4><u>A total of <b>
                    @switch (Measurement)
                    {
                        case ChallengeMeasurement.Distance:
                            <span>@Math.Round(Distances.Sum(stats => stats.LastMonthsTotal), 1) km</span>
                            break;
                        case ChallengeMeasurement.Elevation:
                            <span>@Math.Round(Elevations.Sum(stats => stats.LastMonthsTotal), 1) m</span>
                            break;
                        case ChallengeMeasurement.Time:
                            <span>@Math.Round(Durations.Sum(stats => stats.LastMonthsTotal), 1) h</span>
                            break;
                        default:
                                throw new ArgumentOutOfRangeException();
                    }
        </b></u></h4>
    </div>
</div>
    

