@inject IStringLocalizer<AthleteCard> Loc

@if (Athlete is not null)
{
    <div class="athlete-card p-3 d-flex flex-row align-items-center flex-wrap">
        <div class="d-flex align-items-center flex-row column-gap-2 athlete-name me-auto">
            @if (Athlete.ImgUrl is not null)
            {
                <Avatar Url="@Athlete.ImgUrl" Size="30" />
            }
            <NavLink href="@($"/athletes/{Athlete.Id}")"><span>@Athlete.Name</span></NavLink>
        </div>
        @if (!IsYou)
        {
            @if (IsFollowing)
            {
                <div class="unfollow-button" @onclick="() => FollowingStatusChanged.InvokeAsync()">
                    <i class="bi bi-heart-fill" aria-hidden="true"></i>
                    <span class="unfollow-button-text">
                        @Loc["Following"]
                    </span>
                    <span class="unfollow-button-text-hover">
                        @Loc["Unfollow"]
                    </span>
                </div>
            }
            else if (IsPendingFollowing)
            {
                <div class="unfollow-button" @onclick="() => FollowingStatusChanged.InvokeAsync()">
                    <i class="bi bi-heart-half" aria-hidden="true"></i>
                    <span class="unfollow-button-text">
                        @Loc["Pending"]
                    </span>
                    <span class="unfollow-button-text-hover">
                        @Loc["Cancel"]
                    </span>
                </div>
            }
            else
            {
                <div class="follow-button" @onclick="() => FollowingStatusChanged.InvokeAsync()">
                    <i class="bi bi-heart" aria-hidden="true"></i>
                    <span class="follow-button-text">
                        @Loc["Follow"]
                    </span>
                </div>
            } 
        }

        @if (IsFollower)
        {
            <button class="btn btn-outline-danger invisible" disabled="">
                <i class="bi bi-x-circle" aria-hidden="true"></i>
            </button>
            <button class="btn btn-outline-danger" @onclick="() => RemoveFollower.InvokeAsync()">
                <i class="bi bi-trash" aria-hidden="true"></i>
            </button>
        }
        else if (IsPendingFollower)
        {
            <button class="btn btn-outline-success" @onclick="() => AcceptFollower.InvokeAsync()">
                <i class="bi bi-check-circle" aria-hidden="true"></i>
            </button>
            <button class="btn btn-outline-danger" @onclick="() => DeclineFollower.InvokeAsync()">
                <i class="bi bi-x-circle" aria-hidden="true"></i>
            </button>
        }
        else
        {
            <button class="btn btn-outline-danger invisible" disabled>
                <i class="bi bi-trash" aria-hidden="true"></i>
            </button>
            <button class="btn btn-outline-danger invisible" disabled>
                <i class="bi bi-x-circle" aria-hidden="true"></i>
            </button>
        }

        <div class="d-flex flex-row align-items-center strava-link column-gap-1">
            <a target="_blank" href="https://www.strava.com/athletes/@Athlete.StravaId">@Loc["ViewOnStrava"]</a>
            <i class="bi pb-1 bi-box-arrow-up-right align-self-start" aria-hidden="true"></i>
        </div>

    </div>
}
